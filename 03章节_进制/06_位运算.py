"""
Python中有6个位运算符：
&、|、^、~、>>、<<
"""

# 注意：计算机在进行运算的时候,不论是何种运算,都是以补码的方式来计算,即：在进行运算的时候,首先拿到对象的补码
"""
① ~按位取反, 规则：对数据的每个二进制位取反，即把1变为0，把0变为1
demo1: 分析~-2, ~2的结果
-2 => 原码：1000 0010 
      反码：1111 1101
      补码：1111 1110
~-2   =>   0000 0001 (补码) => 0000 0001 (原码) => 1

 2 => 原码：0000 0010
      反码：0000 0010
      补码：0000 0010
~2   =>    1111 1101 (补码) => 1111 1100 (反码) => 1000 0011 (原码) => -3
"""
# 验证
print(~-2)  # 1
print(~2)  # -3
print("---" * 20)

"""
② &按位与, 规则：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0
demo2:分析2 & 3的结果
 2 => 补码：0000 0010
 3 => 补码：0000 0011
2 & 3  =>  0000 0010 (补码) => 0000 0010 (原码) => 2
"""
# 验证
print(2 & 3)  # 2
print("---" * 20)

"""
③ ^按位异或, 规则：当两个对应的二进位相异时，结果为1，否则为0
demo3:分析2 ^ -3的结果
 2 => 补码：0000 0010
-3 => 补码：1111 1101
 2 ^ -3 => 1111 1111 (补码) => 1111 1110 (反码) => 1000 0001 (原码) => -1
"""
# 验证
print(2 ^ -3)  # -1
print("---" * 20)

"""
④ |按位或, 规则：只要对应的二个二进位有一个为1时，结果位就为1
demo4:分析2 | 3的结果
 2 => 补码：0000 0010
 3 => 补码：0000 0011
2 | 3  =>  0000 0011 (补码) => 0000 0011 (原码) => 3
"""
# 验证
print(2 | 3)  # 3
print("---" * 20)

"""
⑤ <<左移, 规则：运算数的各二进位全部左移若干位，由 << 右边的数指定移动的位数，高位丢弃，低位补0
demo5:分析5<<1, -5<<1 的结果
 5 => 补码：0000 0101
 5 << 1 :  0000 1010 (补码) => 0000 1010 (原码) => 10
-5 => 原码：1000 0101
      反码：1111 1010
      补码：1111 1011
-5 << 1 :  1111 0110 (补码) => 1111 0101 (反码) => 1000 1010 (原码) => -10
"""
# 验证, 注意：对于a << b的结果,相当于a * (2**b)
print(5 << 1)  # 10
print(-5 << 1)  # -10
print(7 << 3)  # 56
print("---" * 20)

"""
⑥ >>右移, 规则：把 >> 左边的运算数的各二进位全部右移若干位，>> 右边的数指定移动的位数，低位溢出，符号位不变，并用符号位补溢出的高位
demo6:分析5>>1, -5>>1 的结果
 5 => 补码：0000 0101
 5 >> 1 :  0000 0010 (补码) => 0000 0010 (原码) => 2
-5 => 补码：1111 1011
-5 >> 1 :  1111 1101 (补码) => 1111 1100 (反码) => 1000 0011 (原码) => -3
"""
# 验证, 注意：对于a >> b的结果,相当于a // 2执行b次
print(5 >> 1)  # 2
print(-5 >> 1)  # -3
print("---" * 20)

