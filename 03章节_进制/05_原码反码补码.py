"""
原码、反码、补码 (重难点)
假定：使用一个字节来表示以下例子 (正常情况以下例子应为28个字节,转为二进制则需展示28 * 8位)
① 二进制的最高位是符号位：0表示正数,1表示负数
例如：
 3 => 0000 0011
-3 => 1000 0011
注意：二进制的最高位(符号位)是有其特殊含义的

② 正数的原码,反码,补码都一样
 3 => 原码： 0000 0011
      反码： 0000 0011
      补码： 0000 0011

③ 负数的反码 = 它的原码符号位不变，其它位取反(即：0->1,1->0)
-3 -> 原码：1000 0011
      反码：1111 1100

④ 负数的补码 = 它的反码 + 1,负数的反码 = 负数的补码 - 1
-3 -> 原码：1000 0011
      反码：1111 1100
      补码：1111 1101

⑤ 0的反码,补码都是0

⑥ 在计算机运算的时候,都是以补码的方式来运算的
 1 => 补码：0000 0001
 3 => 补码：0000 0011
 1 + 3 =>  0000 0100 (补码) ==> 原码：0000 0100 => 4

 1 => 补码：0000 0001
-3 => 原码：1000 0011 => 反码：1111 1100 => 补码：1111 1101
 1 - 3 => 1 + (-3)
   1的补码：0000 0001
  -3的补码：1111 1101
 1 - 3 =>  1111 1110 (补码) => 反码：1111 1101 => 原码：1000 0010 => -2

⑦ 当我们看运算结果的时候，要看它的原码
"""
import sys

print(sys.getsizeof(-3))
